*guard.nvim.txt*           For NVIM v0.8.0           Last change: 2023 June 13

==============================================================================
Table of Contents                               *guard.nvim-table-of-contents*

  - guard.nvim                                         |guard.nvim-guard.nvim|
  - Features                                             |guard.nvim-features|
  - Setup                                                   |guard.nvim-setup|
  - Config Options                                 |guard.nvim-config-options|
  - Usage                                                   |guard.nvim-usage|
  - Trobule                                               |guard.nvim-trobule|
  - License MIT                                       |guard.nvim-license-mit|

GUARD.NVIM                                             *guard.nvim-guard.nvim*

Asynchronous formatting and lint checking plug-ins, I personally don’t like
the way that use fake lsp to client to do formatting and lint checking. Accept
lsp request or notify then invoke tool then get result and send back. Why add a
process in the middle, There is a proverb in China called **Paint a snake with
feet** and don’t blindly praise lsp.It’s getting bloated and unwieldy.


FEATURES                                                 *guard.nvim-features*

- Async using coroutine and luv spawn
- Support config mulitple tools for format or lint on buffer
- Light-weight


SETUP                                                       *guard.nvim-setup*

use any plugin manager you like then call setup

>lua
    --config must before this line
    require('guard').setup({})
<


CONFIG OPTIONS                                     *guard.nvim-config-options*

- `fmt_on_save` auto format when save file

command `GuardFmt` for command use, use `GuardDisable` to diable auto format.


USAGE                                                       *guard.nvim-usage*

an example usage

>lua
    local ft = require('guard.filetype')
    local c = ft('c')
    c:fmt('clang-format')
    c:lint('clang-tidy')
    ft('lua'):fmt('stylua')
    ft('go'):fmt('lsp'):append('golines')
    --note setup must be last line
    require('guard').setup()
<

first import `guard.filetype` module then call it to register filetype,then use
chain call to register format or tool config by using `fmt` and `append`
function.type of them is `table` or `string` if you want use the builin config
just pass string if you want use a custom config pass table.


BUILTIN TOOLS ~


FORMATTER

- `lsp` use `vim.lsp.buf.format`
- `clang-format`
- `prettier`
- `rustfmt`
- `stylua`
- `golines`

table format for custom tool

>
    {
        cmd              --string tool command
        args             --table command arugments
        fname            --string insert filename to args tail
        stdin            --boolean pass buffer contents into stdin
        timeout          --integer
        ignore_pattern   --table ignore run format when pattern match
        ignore_error     --when has lsp error ignore format
    
    
        --special
        fn       --function if fn is set other field will not take effect
    }
<


LINTER

- `clang-tidy`


TROBULE                                                   *guard.nvim-trobule*

if guard do nothing when save file run `checkhealth` first.


LICENSE MIT                                           *guard.nvim-license-mit*

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
